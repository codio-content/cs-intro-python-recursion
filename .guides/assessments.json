[
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1896286432",
  "source": {
   "name": "function basics reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat is the difference between defining a function and calling a function?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "84df859f-6ed9-21ed-e51f-1c4112d85e57",
     "correct": false,
     "answer": "Calling a function tells Python what actions the function will perform. Defining a function tells Python to perform those actions."
    },
    {
     "_id": "0da40bbb-6bbe-6918-07f4-42e2f3f4ea0c",
     "correct": false,
     "answer": "Defining a function creates a class, while calling a function creates a method."
    },
    {
     "_id": "fcfe8e17-c402-f9a7-395e-fdd5aacbc747",
     "correct": true,
     "answer": "Defining a function tells Python what actions the function will perform. Calling a function tells Python to perform those actions."
    },
    {
     "_id": "7753a2be-4850-6746-bbdf-cb18d1ac6998",
     "correct": false,
     "answer": "Defining a function and calling a function are interchangeable terms."
    }
   ],
   "guidance": "Defining a function tells Python what actions the function will perform. Calling a function tells Python to perform those actions.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Defining a function"
     }
    ],
    "files": [
     "code/functions/call-function.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/call-function.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between a function call and a function definition"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1748259403",
  "source": {
   "name": "functions whitespace reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nHow do you tell Python that your function declaration is done?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "99f141d9-e0d6-6114-a5bd-b7cb9ed4b0f2",
     "correct": true,
     "answer": "Remove the indentation"
    },
    {
     "_id": "a2fa6206-fb56-6ef5-611f-aa46a8d01e11",
     "correct": false,
     "answer": "Use the `}` character"
    },
    {
     "_id": "0270227e-0854-ee41-b026-9dec5039b87f",
     "correct": false,
     "answer": "Use the `end` keyword"
    },
    {
     "_id": "e701b7aa-aede-5650-bcf2-02ec38c721a5",
     "correct": false,
     "answer": "Use the `)` character"
    }
   ],
   "guidance": "Python uses whitespace to differentiate between normal code and a function definition. Code for a function definition is indented (4 spaces is convention). Once code no longer has this indentation, the function definition is done. Blank lines have no affect on how Python interprets your code. Though blank lines can make your code easier to read for humans.",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/functions/whitespace.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/whitespace.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the end of a function definition"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1804598706",
  "source": {
   "name": "functions docstring reading question",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the true statements about the docstring.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "726cca93-629d-603a-2391-e85f18c8ccc6",
     "correct": true,
     "answer": "Must be indented like the function body"
    },
    {
     "_id": "a8aa3afb-9a8a-a23d-6002-88547ac71abc",
     "correct": true,
     "answer": "Will be displayed when used with the `help` function"
    },
    {
     "_id": "2c1f8719-040c-e788-70f6-463a347f7760",
     "correct": true,
     "answer": "The docstring is a form of documentation on what the function does and how to use it"
    },
    {
     "_id": "5d4efaaf-fccf-3f1d-1b0e-ee233c53202c",
     "correct": true,
     "answer": "If you do not have a docstring, there will be an error message"
    }
   ],
   "guidance": "All of the statements are true of docstrings:\n* Must be indented like the function body\n* Will be displayed when used with the `help` function\n* The docstring is a form of documentation on what the function does and how to use it\n* If you do not have a docstring, there will be an error message",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Docstring"
     }
    ],
    "files": [
     "code/functions/docstring.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/docstring.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the role of a docstring in a function"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2081035412",
  "source": {
   "name": "order a function definition and function call",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to define and call the function `caesar_quote`. **Note**, not all of the code blocs will be used.",
   "initial": "def caesar_quote():\n    \"\"\"Print the Latin version of 'I came, I saw, I conquered'\"\"\"\n    print(\"Veni, vidi, vici\")\ncaesar_quote()\ndefine caesar_quote(): #distractor\ncaesar_quote #distractor\ncaesarQuote() #distractor",
   "options": "{\n  \"sortableId\" : \"sortable\",\n  \"trashId\" : \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "A function needs to be defined before it can be called. In Python, function definitions are started with the keyword `def`. Function definitions should start with the function header, then the docstring, and finally the function body. Be sure to indent the docstring and the function body. To call a function, write the function's name (as stated in the function header) followed by parentheses. The function call should not be indented.\n\n```python\ndef caesar_quote():\n    \"\"\"Print the Latin version of 'I came, I saw, I conquered'\"\"\"\n    print(\"Veni, vidi, vici\")\ncaesar_quote()\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Define a function, call a function"
     }
    ],
    "files": [
     "code/functions/whitespace.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/whitespace.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT define and call a function"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1983298612",
  "source": {
   "name": "formative assessment function basics",
   "showName": false,
   "instructions": "## Formative Assessment\n\nFill in the blanks below to complete a function definition and a function call.",
   "text": "<<<def>>> my_function()<<<:>>>\n    <<<\"\"\">>>Print the string 'This is a function'.<<<\"\"\">>>\n    print(\"This is a function\")\n\n<<<my_function>>>()",
   "guidance": "Function headers start with the `def` keyword and end with a `:`. The docstring starts and ends with `\"\"\"`. Finally, you call a function by writing its name followed by parentheses.\n\n```python\ndef my_function():\n    \"\"\"Print the string 'This is a function'.\"\"\"\n    print(\"This is a function\")\n\nmy_function()\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Define a function, call a function, docstring"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT define and call a function",
   "tokens": {
    "blank": [
     "def",
     ":",
     "\"\"\"",
     "\"\"\"",
     "my_function"
    ],
    "text": [
     0,
     " my_function()",
     0,
     "\n    ",
     0,
     "Print the string 'This is a function'.",
     0,
     "\n    print(\"This is a function\")\n\n",
     0,
     "()"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1415019255",
  "source": {
   "name": "parameter values reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect all of the data types that can be passed to a function as a parameter. **Note**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "4bbc6c9d-656e-3d2a-1562-e515a59951df",
     "correct": true,
     "answer": "Numbers (floats or ints)"
    },
    {
     "_id": "4481e041-c5bd-e523-9c48-1e80c89febba",
     "correct": true,
     "answer": "Strings"
    },
    {
     "_id": "118535b0-467d-898a-2758-c87d3e5dfbba",
     "correct": true,
     "answer": "Booleans"
    },
    {
     "_id": "3cc9dcf5-ab27-b1ac-3719-d17de7e3dd8c",
     "correct": true,
     "answer": "Lists of strings, numbers, or booleans"
    }
   ],
   "guidance": "Any of the data types covered so far (plus many more) can be passed as a parameter to a function. This includes lists of strings, numbers, booleans, or a combination of those data types.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Parameters, data types"
     }
    ],
    "files": [
     "code/functions/parameter-values.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/parameter-values.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the data types that can be passed to a function"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1122179925",
  "source": {
   "name": "checking parameter values with try/except reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect all of the things that the `try... except` keywords allow you to do. **Note**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "4bd4f6c0-7aa7-a25e-516e-12a657454f58",
     "correct": true,
     "answer": "Allows your program to keep running even if there is an error."
    },
    {
     "_id": "09615322-dd7a-57de-a8bc-37c604dc0ac9",
     "correct": true,
     "answer": "Allows you to write custom error messages."
    },
    {
     "_id": "b222ac8a-9508-166f-d7b0-d00effabdb80",
     "correct": false,
     "answer": "Is the only way to detect certain errors in Python."
    },
    {
     "_id": "4c0d8949-dfc6-7ca2-f298-a2dbb9c711af",
     "correct": true,
     "answer": "Allows you to check for specific kinds of errors."
    }
   ],
   "guidance": "The following statements are true about the `try... except` keywords:\n* Allows your program to keep running even if there is an error.\n* Allows you to write custom error messages.\n* Allows you to check for specific kinds of errors.\n\nPython will still be able to detect any errors that are not explicitly stated by the `try... except` keywords.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Try/except, parameters"
     }
    ],
    "files": [
     "code/functions/check-parameters.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/check-parameters.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain why try/except is a useful tool for programmers"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3645586010",
  "source": {
   "name": "reading question parameters advanced topics",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below about optional parameters in Python.",
   "text": "You do not have to specify the optional parameter with the function <<<call>>>. However, you must specify the optional parameter and its default value in the function <<<definition>>>.",
   "guidance": "You do not have to specify the optional parameter with the function call. However, you must specify the optional parameter and its default value in the function definition.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Optional parameters"
     }
    ],
    "files": [
     "code/functions/advanced-parameters.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/advanced-parameters.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate using optional variables in function calls and function definitions",
   "tokens": {
    "blank": [
     "call",
     "definition"
    ],
    "text": [
     "You do not have to specify the optional parameter with the function ",
     0,
     ". However, you must specify the optional parameter and its default value in the function ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2941508962",
  "source": {
   "name": "defining and calling a function",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create a program that prints the following output:\n\n```text\nClouds are white.\nFiretrucks are red.\nGrass is green.\n```\n\n**Note**, not all of the code blocks will be used.",
   "initial": "def color_sentences(white, red, green):\n    print(\"{} are white.\\n{} are red.\\n{} is green.\".format(white, red, green)\ncolor_sentences(\"Clouds\", \"Firetrucks\", \"Grass\")\ncolors(\"Clouds\", \"Firetrucks\", \"Grass\") #distractor\ncolor_sentences(\"Firetrucks\", \"Clouds\", \"Grass\") #distractor\ndef color_sentences(red, green, white): #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There are two choices for the function header. Since there are no named parameters in the function calls, the order of the function header and the function call must align so that the string `\"Clouds\"` is stored in the parameter `white`, the string `\"Firetrucks\"` is stored in the parameter `red`, and `\"Grass\"` is stored in the parameter `green`. The only combination where this works is `def color_sentences(white, red, green):` and `color_sentences(\"Clouds\", \"Firetrucks\", \"Grass\")`. There is only one print statement to choose.\n\n```python\ndef color_sentences(white, red, green):\n    print(\"{} are white.\\n{} are red.\\n{} is green.\".format(white, red, green)\ncolor_sentences(\"Clouds\", \"Firetrucks\", \"Grass\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Parameters, function definition, function call"
     }
    ],
    "files": [
     "code/functions/check-parameters.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/check-parameters.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a function definition and function call to match a predetermined set of output"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1267559242",
  "source": {
   "name": "formative assessment try/except parameters",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create a program that divides the first parameter by the second. The function should check for division by zero and print an appropriate message. **Note**, not all of the code blocks will be used.",
   "initial": "def division(num1, num2):\n    try:\n        print(num1 / num2)\n    except ZeroDivisionError:\n        print(\"Division by zero is not allowed\")\nexcept: #distractor\nexcept TypeError: #distractor\ntry print(num1 / num2): #distractor\nprint(num3, num4) #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There is only one code block with a function definition. The `try` keyword exists on its own, so the block that says `try print(num1 / num2):` should be ignored. The function header declares two parameters with `num1` and `num2`. So the code block that says `print(num3 / num4)` should be ignored because those variables do not exist. The key to this program is that it has to check for a division by zero error. So ignore the code block that says `except:` because that checks for any error, not just division by zero. Also ignore `except TypeError:` because this checks only for type errors.\n\n```python\ndef division(num1, num2):\n    try:\n        print(num1 / num2)\n    except ZeroDivisionError:\n        print(\"Division by zero is not allowed\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Parameters, try/except"
     }
    ],
    "files": [
     "code/functions/check-parameters.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/check-parameters.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT design a function that checks for division by zero"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-18589681",
  "source": {
   "name": "variable scope reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below on variable scope.",
   "text": "<<<Local>>> scope allows for two variables to have the same name but be independent of each other.\n<<<Global>>> scope allows for a single variable to exist throughout an entire program, even inside functions.",
   "guidance": "Variable scope allows for two variables to have the same name but be independent of each other.\nGlobal scope allows for a single variable to exist throughout an entire program, even inside functions.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Variable Scope"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Local scope, global scope"
     }
    ],
    "files": [
     "code/functions/variable-scope.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/variable-scope.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between global and local scope",
   "tokens": {
    "blank": [
     "Local",
     "Global"
    ],
    "text": [
     0,
     " scope allows for two variables to have the same name but be independent of each other.\n",
     0,
     " scope allows for a single variable to exist throughout an entire program, even inside functions."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1787984748",
  "source": {
   "name": "reading question global scope",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat does the `global` keyword do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "cad81e54-eede-8aea-69b1-9571e28c1b4c",
     "correct": false,
     "answer": "Without the `global` keyword, all variables will be local variables."
    },
    {
     "_id": "f5d3a338-e1c6-0159-e3af-104d412ad144",
     "correct": true,
     "answer": "The `global` keyword allows for a global variable to be modified inside a function."
    },
    {
     "_id": "e3c3a8aa-15d7-dd69-6a3a-c868d736de59",
     "correct": false,
     "answer": "The `global` keyword allows for a global variable to be \"seen\" inside a function, but it cannot be modified."
    },
    {
     "_id": "3f7a7fc0-3c57-88a4-eaeb-7b49446c1516",
     "correct": false,
     "answer": "The `global` keyword is required for all variable declarations. You will get an error message if you do not use it."
    }
   ],
   "guidance": "All variables declared in the main program are global variables. This means they can be \"seen\" inside all functions. However, the global variables cannot be modified by the functions. The `global` keyword allows functions to modify global variables.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Variable scope, global variables"
     }
    ],
    "files": [
     "code/functions/global-scope.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/global-scope.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the function of the global keyword"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1906116983",
  "source": {
   "name": "reading question returning values",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat does the `return` keyword do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6b8e436f-9241-e2df-e261-74abd8114603",
     "correct": true,
     "answer": "Returns a value calculated by a function back to the program."
    },
    {
     "_id": "dd9c9c0e-8f3d-76b7-0f74-57c7ae4d66eb",
     "correct": false,
     "answer": "Prints a value to the screen."
    },
    {
     "_id": "d4ebefaa-d251-be41-6545-6becc50fa564",
     "correct": false,
     "answer": "The `return` keyword must be used to terminate a function."
    },
    {
     "_id": "15a91a35-ed10-a6f6-091b-4670c0dd4227",
     "correct": false,
     "answer": "The `return` keyword is only used with ints and floats. Other values cannot be used with `return`."
    }
   ],
   "guidance": "The `return` keyword returns a value calculated by a function back to the program. `reuturn` does not print anything to the screen. Functions do not require `return` when they terminate (think of all of the functions you wrote that use `print` at the end). Functions can return any datatype that is valid in Python.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Return value"
     }
    ],
    "files": [
     "code/functions/returning-values.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/returning-values.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the role of the return keyword"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-145527699",
  "source": {
   "name": "formative assessment variable scope",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below so that the program has a global variable called `my_var`. The function `add_5` should add 5 to `my_var`.",
   "initial": "my_var = 5\ndef add_5():\n    print(my_var + 5)\nadd_5()",
   "options": "{\n  \"sortableId\" : \"sortable\",\n  \"trashId\" : \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Since `my_var` has to be a global variable, it must be declared outside of the function.\n\n```python\nmy_var = 5\ndef add_5():\n    print(my_var + 5)\nadd_5()\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Variable scope, global variable"
     }
    ],
    "files": [
     "code/functions/returning-values.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/returning-values.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT implement a global variable that is used (but not modified) in a function"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1374456814",
  "source": {
   "name": "formative assessment global variable",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create a program with the global variable `my_var`. Define and call the function `change_var`, which should be able to modify the value of `my_var`. **Note**, not all of the code blocks will be used.",
   "initial": "my_var = 0\ndef change_var():\n    global my_var\n    my_var += 1\nchange_var()\nglobal(my_var) #distractor\nmy_var.global() #distractor",
   "options": "{\n  \"sortableId\" : \"sortable\",\n  \"trashId\" : \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Start with declaring the global variable `my_var`. Then declare the function `change_var`. In order to modify the a global variable in a function, use the keyword `global` followed by the variable name. Change the value of `my_var` (in this case add 1). Finally call the function `change_var`.\n\n```python\nmy_var = 0\ndef change_var():\n    global my_var\n    my_var += 1\nchange_var()\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Global variables"
     }
    ],
    "files": [
     "code/functions/returning-values.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/returning-values.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the global keyword to modify the value of a global variable in a function"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-511526029",
  "source": {
   "name": "reading question side effects",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat is a side effect?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "906f3b29-e505-3606-21cf-f0d014c31e62",
     "correct": false,
     "answer": "When your code has a bug in it, the error message is a side effect of bad code."
    },
    {
     "_id": "1e502fe4-faf5-0e54-840a-79ca885a57d4",
     "correct": false,
     "answer": "A side effect is when a function causes a change that is internal to the function."
    },
    {
     "_id": "ae001e6c-cd59-a6d0-84a1-ee0692d58880",
     "correct": true,
     "answer": "A side effect is when a function causes a change that is external to the function itself."
    },
    {
     "_id": "3d1bd9e5-da1d-a188-17fc-ca44f2030377",
     "correct": false,
     "answer": "A side effect is an unwanted change in your program."
    }
   ],
   "guidance": "A side effect is when a function causes a change that is external to the function itself. While some programmers try to limit the amount of side effects in their code, sometimes side effects are the desired result. Examples of side effects include modifying a global variable, printing to the screen, writing to a file, etc.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Side effects"
     }
    ],
    "files": [
     "code/functions/side-effects.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/side-effects.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define a side effect"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-908435280",
  "source": {
   "name": "reading question local scope",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "text": "<<<Variables>>> declared inside a function have <<<local>>> scope. This means you can only reference the variable from <<<inside>>> the function. Trying to reference the variable from <<<outside>>> the function will cause an error.",
   "guidance": "Variables declared inside a function have local scope. This means you can only reference the variable from inside the function. Trying to reference the variable from outside the function will cause an error.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/functions/local-scope.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/local-scope.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "Variables",
     "local",
     "inside",
     "outside"
    ],
    "text": [
     0,
     " declared inside a function have ",
     0,
     " scope. This means you can only reference the variable from ",
     0,
     " the function. Trying to reference the variable from ",
     0,
     " the function will cause an error."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1907306637",
  "source": {
   "name": "reading question global vs local scope",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "text": "When you have a local and global variable with the same name and there is no `global` keyword, the <<<local>>> scope variable takes precedence.\n\nWhen you have a local and global variable with the same name and the `global` keyword is being used, the <<<global>>> scope variable takes precedence.",
   "guidance": "When there are a local and global variable with the same name and the `global` keyword **is not** being used, then the local scope variable takes precedence.\n\nWhen there are a local and global variable with the same name and the `global` keyword **is** being used, then the global scope variable takes precedence.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Global scope, local scope"
     }
    ],
    "files": [
     "code/functions/variable-scope.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/variable-scope.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine precedence between locally and globally scoped variables",
   "tokens": {
    "blank": [
     "local",
     "global"
    ],
    "text": [
     "When you have a local and global variable with the same name and there is no `global` keyword, the ",
     0,
     " scope variable takes precedence.\n\nWhen you have a local and global variable with the same name and the `global` keyword is being used, the ",
     0,
     " scope variable takes precedence."
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-539536156",
  "source": {
   "name": "formative assessment return statement",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create the function `is_even` that takes the parameter `num`. The function should return a boolean to indicate if a number is even. **Note**, not all of the code blocks will be used.",
   "initial": "def is_even(num):\n    return(num % 2 == 0)\ndef is_even(): #distractor\nprint(num % 2 == 0) #distractor\nreturn(num % 2) #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Two important pieces of information were give about the function `is_even`. One, it has a parameter `num`. Two, the function returns a boolean statement. So the function header should have the parameter `num` and the function body should have a `return` statement.\n\n```python\ndef is_even(num):\n    return(num % 2 == 0)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Return value"
     }
    ],
    "files": [
     "code/functions/variable-scope.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a function that returns a boolean value"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3356937133",
  "source": {
   "name": "formative assessment side effects",
   "showName": false,
   "instructions": "## Formative Assessment\n\nThe function below that has a side effect (printing).\n\n```python\ndef has_vowel(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for vowel in vowels:\n        if vowel in string:\n            print(\"{} has a vowel.\".format(string))\n            break\n    print(\"{} does not have a vowel.\".format(string))\nhas_vowel(\"apple\")\n```\n\nRearrange the code blocks below to create new version of the function `has_vowel` that does not have a side effect. Instead it returns the appropriate string. Print the string from outside the function.",
   "initial": "def has_vowel(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for vowel in vowels:\n        if vowel in string:\n            return(\"{} has a vowel.\".format(string))\n            break\n    return(\"{} does not have a vowel.\".format(string))\nprint(has_vowel(\"apple\"))\nprint(\"{} does not have a vowel.\".format(string)) #distractor\nprint(\"{} has a vowel.\".format(string)) #distractor\nhas_vowel(\"apple\") #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The side effects in the original program were the print statements. Replace `print` with `return` and the function no longer has any side effects. You still need to print the result, and this code will be outside of the function. Print the result of the function `has_vowel` with the parameter `\"apple\"`.\n\n```python\ndef has_vowel(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for vowel in vowels:\n        if vowel in string:\n            return(\"{} has a vowel.\".format(string))\n            break\n    return(\"{} does not have a vowel.\".format(string))\nprint(has_vowel(\"apple\"))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Side effects"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT convert a function with side effects to a function without them"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3101012097",
  "source": {
   "name": "formative assessment side effects",
   "showName": false,
   "instructions": "## Formative Assessment\n\nThe code below has a side effect (printing).\n\n```python\ndef has_letter_a(word):\n    if \"a\" in word:\n        print(\"{} has the letter 'a' in it.\".format(word))\n    else:\n        print(\"{} does not have the letter 'a' in it.\".format(word))\nhas_letter_a(\"apple\")\n```\n\nWhich of the code samples below produces the same output but without having any side effects in the function `has_letter_a`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "9e32d51e-a625-6712-2a8d-b2cfaf9896fa",
     "correct": false,
     "answer": "```python\ndef has_letter_a(word):\n    if \"a\" in word:\n        return(\"{} has the letter 'a' in it.\".format(word))\n    else:\n        return(\"{} does not have the letter 'a' in it.\".format(word))\nhas_letter_a(\"apple\")\n```"
    },
    {
     "_id": "302cb9b9-6c55-c24f-f0b4-494f59d1fe92",
     "correct": false,
     "answer": "```python\ndef has_letter_a(word):\n    if \"a\" in word:\n        print(\"{} has the letter 'a' in it.\".format(word))\n    else:\n        print(\"{} does not have the letter 'a' in it.\".format(word))\nprint(has_letter_a(\"apple\"))\n```"
    },
    {
     "_id": "feff14bc-8395-0d20-87a3-72efb506e810",
     "correct": true,
     "answer": "```python\ndef has_letter_a(word):\n    if \"a\" in word:\n        return(\"{} has the letter 'a' in it.\".format(word))\n    else:\n        return(\"{} does not have the letter 'a' in it.\".format(word))\nprint(has_letter_a(\"apple\"))\n```"
    },
    {
     "_id": "d5f3f4d6-5cfa-ca96-b6a0-cbdfe7c6ffda",
     "correct": false,
     "answer": "```python\ndef has_letter_a(word):\n    if \"a\" in word:\n        return(\"{} has the letter 'a' in it.\".format(word))\n    else:\n        return(\"{} does not have the letter 'a' in it.\".format(word))\nprint(has_letter_a)\n```"
    }
   ],
   "guidance": "The side effects in the original function are the print statements. The solution should not have print statements in the function `has_letter_a`. Replace the print statements with `return` statements. Finally the print statement should come outside the function, and you want to print the results of `has_letter_a(\"apple\")`.\n\n```python\ndef has_letter_a(word):\n    if \"a\" in word:\n        return(\"{} has the letter 'a' in it.\".format(word))\n    else:\n        return(\"{} does not have the letter 'a' in it.\".format(word))\nprint(has_letter_a(\"apple\"))\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Side effects"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT convert a function with side effects into a function without side effects"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-531814659",
  "source": {
   "name": "reading question when to use a function",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat are the benefits to using functions? **Note**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "1adcdb70-d947-0b17-f5eb-fe88324a535b",
     "correct": true,
     "answer": "Breakdown complex problems into smaller problems."
    },
    {
     "_id": "70ec27d3-d5c1-04fb-a9f8-ef819d74ddd1",
     "correct": true,
     "answer": "The smaller problems are easier to reason about."
    },
    {
     "_id": "7d64b454-2ced-5ffd-de72-9fe89c716134",
     "correct": true,
     "answer": "The smaller problems are easier to debug."
    },
    {
     "_id": "198aafb9-4279-8396-1a3e-f06175d4d3cf",
     "correct": true,
     "answer": "Combine many simple functions to solve complex problems."
    }
   ],
   "guidance": "Using functions in your programs allows for the following things:\n* Breakdown complex problems into smaller problems.\n* These smaller problems are easier to reason about.\n* It is easier to debug a simple function as compared to a complex block of code.\n* Simple functions can be combined to solve complex problems.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Benefits of functions"
     }
    ],
    "files": [
     "code/functions/when-functions.py"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/when-functions.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the benefits of using functions in their programs"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2677448801",
  "source": {
   "name": "reading question modularity",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat are the benefits to modular functions? **Note**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "3ddf333c-b1ad-2c1e-18ef-765b49f97a9d",
     "correct": true,
     "answer": "Modular functions make them more reusable."
    },
    {
     "_id": "428ba8bc-8ac2-e354-0fd9-77ca7dcd0003",
     "correct": false,
     "answer": "blah"
    }
   ],
   "guidance": "",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Modularity"
     }
    ],
    "files": [
     "code/functions/modularity.py"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/modularity.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the benefits of modular functions"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1330281496",
  "source": {
   "name": "reading question helper functions",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect the best definition for a helper function.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "362256bd-2b47-d459-8026-d88843fe66ab",
     "correct": false,
     "answer": "Helper functions are any functions that are defined with `def_helper`."
    },
    {
     "_id": "61b6e1ac-38cc-ac52-4395-9dbc4ced22fa",
     "correct": true,
     "answer": "Helper functions provide a calculation used by another function."
    },
    {
     "_id": "44fb718c-5714-58a0-e5c7-2c84d04d2874",
     "correct": false,
     "answer": "A function is a helper function **only** if it is declared inside another function."
    },
    {
     "_id": "33e08af0-b411-4355-4d3b-2e6b2ab2b777",
     "correct": false,
     "answer": "Helper functions are functions that are used independently from any other functions."
    }
   ],
   "guidance": "Helper functions are any functions which provide a result that is used by another function. Helper functions can be declared outside of the function it helps. Or, a helper function can be declared inside the function it helps.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Helper functions"
     }
    ],
    "files": [
     "code/functions/helper-functions.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/helper-functions.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define a helper function"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2948315125",
  "source": {
   "name": "reading question function composition",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect the code sample below that represents function composition.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "df7c5383-c010-c8de-dc57-fc53d38f2a68",
     "correct": false,
     "answer": "function1(12)\nfunction2(7)"
    },
    {
     "_id": "513e934b-7eb9-7b69-28e5-8a603c47ac01",
     "correct": false,
     "answer": "function2(7)\nfunction1(12)"
    },
    {
     "_id": "23ff7b75-4f1c-bf59-580a-4d1f90baa779",
     "correct": true,
     "answer": "function1(function2(7))"
    },
    {
     "_id": "31ef4110-c04d-d998-337a-f113e565d4ac",
     "correct": false,
     "answer": "It is impossible to combine the two functions."
    }
   ],
   "guidance": "Function composition is when a function call is a parameter to another function.\n\n```python\nfunction1(function2(7))\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Function composition"
     }
    ],
    "files": [
     "code/functions/function-composition.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/function-composition.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define function composition"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1135497979",
  "source": {
   "name": "formative assessment helper functions",
   "showName": false,
   "instructions": "## Formative Assessment\n\nIn physics, force can be calculated with the equation `force = mass * acceleration` and acceleration can be defined as `acceleration = change in velocity / time`. Rearrange the code blocks below to create function declarations for `force` and `acceleration`. The `acceleration` function must be an **internal helper** function for `force`.",
   "initial": "def force(dv, time, mass):\n    \"\"\"Calculate force\"\"\"\n    def acceleration(dv, time):\n        \"\"\"Calculate acceleration\"\"\"\n        return(dv / time)\n    return(mass * acceleration(dv, time))",
   "options": "{\n  \"sortableId\":\"sortable\"\n}",
   "grader": "",
   "guidance": "\n\n```python\ndef force(dv, time, mass):\n    \"\"\"Calculate force\"\"\"\n    def acceleration(dv, time):\n        \"\"\"Calculate acceleration\"\"\"\n        return(dv / time)\n    return(mass * acceleration(dv, time))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Helper function"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT define an internal helper function"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3788114319",
  "source": {
   "name": "formative assessment function composition",
   "showName": false,
   "instructions": "## Formative Assessment\n\nIn physics, velocity can be defined as `velocity = change in position / time` and a change in position can be defined as `position_change = final_position - starting_position`. Fill in the blanks below to make a function composition of the `velocity` and `position_change` functions. Assume the starting position is 0, the final position is 100 and the time is 30.",
   "text": "<<<velocity>>>(<<<position_change>>>(0, 100), <<<30>>>)",
   "guidance": "Since the `velocity` function is dependent upon the `position_change` function, `velocity` is the outermost function. In addition, 0 and 100 were given as the starting and final positions for the `position_change` function, which is on the inside. Lastly, the `velocity` also requires a time parameter (30), which is the final blank.\n\n```python\nvelocity(position_change(0, 100), 30)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Function composition"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a function composition",
   "tokens": {
    "blank": [
     "velocity",
     "position_change",
     "30"
    ],
    "text": [
     0,
     "(",
     0,
     "(0, 100), ",
     0,
     ")"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-984962408",
  "source": {
   "name": "reading question recursion",
   "showName": false,
   "instructions": "## Reading Question\n\nUnder what circumstances does it make sense to use recursion?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a4ce7daa-523b-e966-319d-c98ea4d6f1c4",
     "correct": false,
     "answer": "Recursion can be used at any time"
    },
    {
     "_id": "6c2de0c0-b9ea-1e43-832c-42fff6a4686f",
     "correct": true,
     "answer": "Recursion works best when the solution is self-similar"
    },
    {
     "_id": "9f1dc886-32fe-cdeb-2c53-2aea3c99d177",
     "correct": false,
     "answer": "Recursion is too hard; avoid it at all costs"
    },
    {
     "_id": "ca1dcd95-bbb2-c8bc-6095-5986c9f21122",
     "correct": false,
     "answer": "Recursion only works with mathematical concepts like factorial and the Fibonacci sequence"
    }
   ],
   "guidance": "Recursion works best when the solution is self-similar. That is, when the problem is broken down into smaller parts, and the smaller parts are a variation of the large problem.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "When to use recursion"
     }
    ],
    "files": [
     "code/recursion/what-is-recursion.py",
     "code/functions/what-is-recursion.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/what-is-recursion.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify when recursion can be used"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3252681714",
  "source": {
   "name": "reading question base case",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat is the purpose of the base case in recursion?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "91c96d70-d65a-81f1-34e5-d52678a9c70f",
     "correct": false,
     "answer": "The base case tells the function to call itself."
    },
    {
     "_id": "948ddd45-b5d3-afc9-5a15-83286b5a69cd",
     "correct": false,
     "answer": "The base case is another name for recursion."
    },
    {
     "_id": "01004f1c-88b7-5844-8bdf-03267b6f516a",
     "correct": false,
     "answer": "The base case is the name of the recursive function."
    },
    {
     "_id": "73a46e8d-7f79-8cb2-7417-7b028cb40554",
     "correct": true,
     "answer": "When true, the base case stops the recursive calls and returns a value."
    }
   ],
   "guidance": "When true, the base case stops the recursive calls and returns a value. In the example of factorial, the base case is when `n` is less than or equal to 1. The function returns `1` and the long line of multiplication happens.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Base case"
     }
    ],
    "files": [
     "code/recursion/fibonacci.py",
     "code/functions/fibonacci.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/fibonacci.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define the base case in recursion"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3779446017",
  "source": {
   "name": "Formative assessment recursive sum function",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create a recursive function that finds the sum of `n` integers. For example, `find_sum(5)` would add up the numbers 0 to 5. **Note**, you must use a docstring, and not all of the blocks will be used.",
   "initial": "def find_sum(n):\n    \"\"\"Recursively calculate the sum of the first n numbers\"\"\"\n    if n == 0:\n        return 0\n    else:\n        return(n + find_sum(n-1))\nprint(0) #distractor\nreturn(n - find_sum(n-1)) #distractor\nreturn(n + find_sum(n+1)) #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Start off with the function header and docstring. The next line of code is the base case `if n == 0:`. Recursive functions return values, they do not print them. Ignore the code block that says `print(0)`, and use `return 0`. Next is the else statement. There are two incorrect blocks for the recursive case. First, ignore the code block that says `return(n - find_sum(n-1))`. The function should find the sum, but this code block is subtracting from `n`. Also, the recursive function call should move `n` closer to the base case. Since the base case is 0, `n` should get smaller. Use the code block that says, `return(n + find_sum(n-1))`.\n\n```python\ndef find_sum(n):\n    \"\"\"Recursively calculate the sum of the first n numbers\"\"\"\n    if n == 0:\n        return 0\n    else:\n        return(n + find_sum(n-1))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Create a recursive function"
     }
    ],
    "files": [
     "code/functions/fibonacci.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT create a recursive function to find the sum"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2191119400",
  "source": {
   "name": "formative assessment base case",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume you want to write a recursive function that multiplies each element in a list by the number 5. What should the base case be?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "11b8a146-3b0b-68d2-92e3-4f6699221d09",
     "correct": true,
     "answer": "When the length of the list is 1"
    },
    {
     "_id": "7dff1abd-e3bd-f347-dc59-9ffae1d28801",
     "correct": false,
     "answer": "When the length of the list is 0"
    },
    {
     "_id": "3fc230e7-36e4-745a-f9ac-1834e49e5f5c",
     "correct": false,
     "answer": "When the list is equal to 1"
    },
    {
     "_id": "b48dcc1f-ddae-23c0-e6e3-d2f268f6bd99",
     "correct": false,
     "answer": "When the list is equal to 0"
    }
   ],
   "guidance": "The program should keep recursing until the **length** of the list is 1. A length of 1 means there is only one element left in the list. There is no reason to keep calling the function when once the list is empty.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Base case"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify the base case for a recursive function"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4064605767",
  "source": {
   "name": "helper function question",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat is the relationship between the `draw_triangle` function and the `sierpinski` function?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "70ac8d41-80db-1937-3af8-3ecd1529c939",
     "correct": false,
     "answer": "`sierpinski` is a helper function for `draw_triangle`"
    },
    {
     "_id": "8296b2c1-93b2-19d4-9030-0933f0c0f1ed",
     "correct": true,
     "answer": "`draw_triangle` is a helper function for `sierpinski`"
    },
    {
     "_id": "e211a818-dd47-d5fb-7233-ca25456eb24a",
     "correct": false,
     "answer": "`draw_triangle` is declared inside `sierpinski`"
    },
    {
     "_id": "2dda4d3f-ddd0-6eff-19d8-a1e4ac80cec5",
     "correct": false,
     "answer": "`draw_triangle` is called as a parameter for the `sierpinski` function"
    }
   ],
   "guidance": "`draw_triangle` is a helper function for `sierpinski` because the `sierpinski` function calls `draw_triangle`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Helper function"
     }
    ],
    "files": [
     "code/functions/lab1.py"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/lab1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT identify a helper function"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-932559392",
  "source": {
   "name": "global vs local variables for functions",
   "showName": false,
   "instructions": "## Lab Question\n\nFill in the blanks below.",
   "text": "A <<<local>>> variable is declared inside a function and cannot be accessed outside of the function.\n\nA <<<global>>> variable is declared outside of a function and can be accessed inside a function.",
   "guidance": "A local variable is declared inside a function and cannot be accessed outside the function.\n\nA global variable is declared outside a function and can be accessed inside a function.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Global variable, local variable, variable scope"
     }
    ],
    "files": [
     "code/functions/movie-app.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/movie-app.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between global and local variables",
   "tokens": {
    "blank": [
     "local",
     "global"
    ],
    "text": [
     "A ",
     0,
     " variable is declared inside a function and cannot be accessed outside of the function.\n\nA ",
     0,
     " variable is declared outside of a function and can be accessed inside a function."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2002012187",
  "source": {
   "name": "optional parameters lab question",
   "showName": false,
   "instructions": "## Lab Question\n\nLook at the function definition below and determine what the output will be for the two print statements.\n\n```python\ndef my_function(x=5):\n    print(x)\n\nprint(my_function())\nprint(my_function(7))\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c1f56315-cdb8-d06f-e244-e7b7f0cd7977",
     "correct": false,
     "answer": "7\n5"
    },
    {
     "_id": "04e01f9e-1cc9-be48-a27a-1281fda8c52c",
     "correct": false,
     "answer": "12\n2"
    },
    {
     "_id": "1663bd65-8e1d-ef8d-b3df-395d5bcbe87a",
     "correct": false,
     "answer": "5\n5"
    },
    {
     "_id": "850420ca-4ed4-b7e8-1ac4-6636620d92a6",
     "correct": true,
     "answer": "5\n7"
    }
   ],
   "guidance": "The parameter `x` is an optional parameter. That means the function can be called with no parameters, and Python will assign `x` the value of five`. If `7` is passed as a parameter to the function, then `7` will be used for the value of `x`.\n\n```\n5\n7\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Optional parameter"
     }
    ],
    "files": [
     "code/functions/movie-app.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/movie-app.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT determine the output of a function with an optional parameter"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-188190556",
  "source": {
   "name": "lab question function composition",
   "showName": false,
   "instructions": "## Lab Question\n\nLook at this code and fill in the blank below.\n\n```python\nprint_movie_data(sort_movie_data(movie_data, 2, True))\n```\n",
   "text": "The function `print_movie_data` has another function, `sort_movie_data` as a parameter. This is an example of <<<function composition>>>.",
   "guidance": "When a function has another function as a parameter, this is called function composition.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/functions/movie-app.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/movie-app.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify function composition from a code snippet",
   "tokens": {
    "blank": [
     "function composition"
    ],
    "text": [
     "The function `print_movie_data` has another function, `sort_movie_data` as a parameter. This is an example of ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-858907768",
  "source": {
   "name": "lab question helper functions",
   "showName": false,
   "instructions": "## Lab Question\n\nFill in the blank below.\n",
   "text": "The function `user_interface` calls several functions like `ask_column` and `ask_order`. This is an example of <<<helper functions>>>.",
   "guidance": "When a function calls another function, this is an example of helper functions. ",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Helper functions"
     }
    ],
    "files": [
     "code/functions/movie-app.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/movie-app.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify helper functions",
   "tokens": {
    "blank": [
     "helper functions"
    ],
    "text": [
     "The function `user_interface` calls several functions like `ask_column` and `ask_order`. This is an example of ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "test",
  "taskId": "test-2255079836",
  "source": {
   "name": "functions lab challenge unit test",
   "showName": false,
   "instructions": "Submit your code when you are ready.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"python\",\"subtype\":\"unittest\",\"files\":[\".guides/secure/unit_tests/functions/lab_challenge_test.py\"],\"partialPoints\":true,\"maxPoints\":1,\"executable\":\"python3\",\"pythonwd\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/functions/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/lab_challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1551096855",
  "source": {
   "name": "not changing a parameter with recursion",
   "showName": false,
   "instructions": "## Lab Question\n\nLook at the code below. Select the answer that best describes why the code is problematic.\n\n```python\ndef recursive_function(num):\n    if num < 0:\n        return 1\n    else:\n        return num + recursive_function(num)\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "cb36641b-3f06-7792-07d2-00a1afc85136",
     "correct": false,
     "answer": "There is nothing wrong with the function"
    },
    {
     "_id": "1a70320b-2560-04aa-84c6-e1f37783fadc",
     "correct": false,
     "answer": "The base case should be `if num < 5:`"
    },
    {
     "_id": "b470a048-d4bd-0c9b-a41b-5c403e48baf8",
     "correct": true,
     "answer": "When using recursion, `num` should get smaller so that the base case becomes true"
    },
    {
     "_id": "45ea59b6-924a-4c9c-9d35-c70edae8137d",
     "correct": false,
     "answer": "It should be `return num - recursive_function(num)`"
    }
   ],
   "guidance": "```python\ndef recursive_function(num):\n    if num < 0:\n        return 1\n    else:\n        return num + recursive_function(num)\n```\n\nIn the code above, `recursive_function` is called with `num` staying the same value. If it never gets smaller, then `num` will never be less than 0. The function will be stuck in an infinite loop. The parameter in the recursive function should change so that the base case becomes true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Base case, parameter"
     }
    ],
    "files": [
     "code/recursion/recursive_tree.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/recursive_tree.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT identify the need for a parameter to change when using recursion"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-499923326",
  "source": {
   "name": "put recursion in order",
   "showName": false,
   "instructions": "## Lab Question\n\nRearrange the blocks below to create a recursive function. Assume that the recursive function is called with this code:\n\n`my_recursive_function(15)`\n\n**Note**, a docstring is required, but not all of the code blocks will be used.",
   "initial": "def my_recursive_function(num):\n    \"\"\"Creates a recursive function\"\"\"\n    if num < 0:\n        return 1\n    else:\n        return num + my_recursive_function(num - 1)\nprint(1) #distractor\nreturn num + my_recursive_function(num + 1) #distractor\nprint(num + my_recursive_function(num - 1)) #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Recursive functions need to return values, not print them. So you can ignore the code blocks that say `print`. Since the base case is testing if `num` is less than 0 and `my_recursive_function` was initially called with a parameter of 15, you need to use the code block that says `return num + my_recursive_function(num - 1)`. The value of `num` must get to be equal to or less than 0. If not, the recursive function will become an infinite loop.\n\n```python\ndef my_recursive_function(num):\n    \"\"\"Creates a recursive function\"\"\"\n    if num < 0:\n        return 1\n    else:\n        return num + my_recursive_function(num - 1)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Create a recursive function"
     }
    ],
    "files": [
     "code/recursion/hilbert.py"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 1,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/hilbert.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a recursive function"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2340776475",
  "source": {
   "name": "recursion lab challenge",
   "showName": false,
   "instructions": "Rearrange the code blocks below to create a recursive function that draws this image:\n\n![Square Spiral](.guides/images/square_spiral.png)\n\n**Note**, not all of the code blocks will be used.",
   "initial": "import turtle\nt = turtle.Turtle()\ndef square_spiral(dist):\n    \"\"\"Recursively draw a spiral with right angles\"\"\"\n    if dist > 5:\n      t.forward(dist)\n      t.right(90)\n      square_spiral(dist - 5)\nsquare_spiral(80)\nt.right(dist) #distractor\nsquare_spiral(dist + 5) #distractor\nsquare_spiral(dist) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1,\n  \"turtleModelCode\": \"def square_spiral(dist):\\n\\tif dist> 5:\\n\\tmodelTurtle.forward(dist)\\n\\tmodelTurtle.right(90)\\n\\tsquare_spiral(dist - 5)\\nsquare_spiral(80)\",\n  \"executable_code\": \"for i in range(0,4):\\nmyTurtle.forward(100)\\nmyTurtle.left(120)\\npass\",\n  \"programmingLang\": \"python\"\n}",
   "grader": "5",
   "guidance": "",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Create a recursive function"
     }
    ],
    "files": [
     "code/recursion/exercise5.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT generate recursive function that draws a spiral with right angles"
  }
 },
 {
  "type": "test",
  "taskId": "test-3719855423",
  "source": {
   "name": "'affjglakg",
   "showName": false,
   "instructions": "",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"python\",\"subtype\":\"style\",\"files\":[\".guides/secure/unit_tests/functions/lab_challenge_test.py\"],\"partialPoints\":false,\"maxPoints\":1}",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 300,
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/functions/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/lab_challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-1891014617",
  "source": {
   "name": "check lab challenge functions",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/functions/lab_challenge_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The problem asks you to create function named `to_upper` that receives a string parameter and returns the text in uppercase. The easiest way to do that is to use the `upper()` method on the string that is passed to the function.\n\n```python\ndef to_upper(txt):\n    return(txt.upper())\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Parameters"
     }
    ],
    "files": [
     "code/functions/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/lab_challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT write their own function"
  }
 },
 {
  "type": "test",
  "taskId": "test-4057934440",
  "source": {
   "name": "functions exercise 1 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/functions/exercise1_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The function needs to do two things. One, test to make sure that the two parameters are can be added together and then divided. Use a `try/except` block. You can check for a `TypeError` and return the string `Please use two numbers as parameters`. Otherwise return the sum of the two parameters divided by two.\n\n```python\ndef avg(n1, n2):\n    \"\"\"Return average of two numbers\n    Return a message is a non-number is passed\"\"\"\n    try:\n      return(n1 + n2) / 2\n    except TypeError:\n      return(\"Please use two numbers as parameters\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Try/except"
     }
    ],
    "files": [
     "code/functions/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a function that uses try/except to catch bad parameters"
  }
 },
 {
  "type": "test",
  "taskId": "test-3957105420",
  "source": {
   "name": "functions exercise 2 code test",
   "showName": false,
   "instructions": "Submit your code when ready.",
   "command": "python3 .guides/secure/unit_tests/functions/exercise2_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The function will do one of two things, either return all of the even numbers from a list or return all of the odd numbers from a list. The first thing to do is to create an empty list that the function will return. If the boolean parameter is True, then iterate through the list passed to the function. Check to see if each number is even (`num % 2 == 0`), and append the number to the list if even. If the boolean parameter is False, check if each element in the given list is odd. Append it to the list that will be returned. Here is one possible solution to the problem:\n\n```python\ndef odds_or_evens(my_bool, nums):\n    \"\"\"Returns all of the odd or\n    even numbers from a list\"\"\"\n    return_list = []\n    for num in nums:\n      if my_bool:\n          if num % 2 == 0:\n              return_list.append(num)\n      else:\n          if num % 2 != 0:\n              return_list.append(num)\n                \n    return return_list\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Return a list"
     }
    ],
    "files": [
     "code/functions/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to define a function that  has multiple parameters and returns a list"
  }
 },
 {
  "type": "test",
  "taskId": "test-1820725404",
  "source": {
   "name": "functions exercise 3 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/functions/exercise3_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The function `search_list` needs a list of strings parameter and a string parameter. Iterate through the list and check each item against the search term (string parameter). The key is to put both strings (the item from the list and the search term) into the same case for the comparison. If there is a match, return the index of the item with the list method `.index()`. If there is no match, return `-1`. Here is one possible solution:\n\n```python\ndef search_list(lst, term):\n    \"\"\"Search for item in a list\n    Return the index if found\n    Return -1 if not found\"\"\"\n    for item in lst:\n        if item.lower() == term.lower():\n            return lst.index(item)\n    return -1\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Functiosn"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Multiple parameters, string comparison"
     }
    ],
    "files": [
     "code/functions/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a function that searches a list fora specific term"
  }
 },
 {
  "type": "test",
  "taskId": "test-3993992507",
  "source": {
   "name": "functions exercise 4 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/functions/exercise4_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Even though goal of this activity is to write a function, you will need some important pieces of information outside of the function. First, you need to import the `os` and `csv` modules. You also need to create the global variables `file_name` and `file_path` as given by the problem. Once the `best_team` function has been declared, open a CSV file. Then use the `csv.reader` method on the opened CSV file. As stated in the problem, the first row are headers; skip this row with the `next` function. You will need two variables to keep track of the most wins and the team name who has the most wins. Set the variable for the wins to 0, and make the variable for the team name an empty string. Then iterate through the CSV file. Compare wins in each row (element 3) to the variable that stores the most wins. Remember, all data in a CSV file is stored as a string. So you need to type cast the CSV wins into an integer for the comparison. If the team in the row has more wins, set the wins variable to the number of wins from the row (element 3). Again, be sure to type cast these wins to an integer. Then give the team name variable the name from the row (element 0). Once you have iterated through the file, return the variable with the team name. Here is one possible solution:\n\n```python\nimport csv, os\n\nfile_name = \"mlb_data.csv\"\nfile_path = \"student_folder/.exercises\"\n\ndef best_team(f_name, f_path):\n    \"\"\"Read a CSV of baseball data.\n    Return the team name with the most wins\"\"\"\n    with open(os.path.join(f_path, f_name), \"r\") as csv_file:\n        reader = csv.reader(csv_file)\n        next(reader)\n        most_wins = 0\n        best_team = \"\"\n        for row in reader:\n            if int(row[3]) > most_wins:\n                most_wins = int(row[3])\n                best_team = row[0]\n        return best_team\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV"
     }
    ],
    "files": [
     "code/functions/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT write a function that reads a CSV file and returns specific information"
  }
 },
 {
  "type": "test",
  "taskId": "test-3501190018",
  "source": {
   "name": "functions exercise 5 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/functions/exercise5_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The solution to this problem has two parts. First, reverse the string passed as a parameter. The second part is to compare the original string and the reversed string and then return True or False. One way to reverse a string is to create an empty string. The iterate backwards through the original string. Take each character and concatenate it with the reversed string. This was done using a while loop. Calculate how many times the loop needs to run. Because strings start counting each character with 0, the last character in the string is the string's length minus 1. Store this number that will represent the position as you iterate backwards through the string. Start at this variable, concatenate the character, and and subtract one from the position variable. Finally, compare the original string and the reversed string. Return True if they are the same, return false if they are different. Here is one possible solution:\n\n```python\ndef is_palindrome(string):\n    reversed_string= \"\"\n    position = len(string) - 1\n    while position >= 0:\n        reversed_string += string[position]\n        position -= 1\n    if string == reversed_string:\n        return True\n    else:\n        return False\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Reverse a string, iteration"
     }
    ],
    "files": [
     "code/functions/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to creates a function that determines if a string is a palindrome"
  }
 },
 {
  "type": "test",
  "taskId": "test-1411085874",
  "source": {
   "name": "recursion exercise 1 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/recursion/exercise1_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The recursive pattern is to take the num passed as a parameter and add it to `recursive_sum` with the number minus 1. The base case is when the number passed is 0. `recursive_sum` should return 0 when the parameter is 0. Here is a solution to the problem:\n\n```python\ndef recursive_sum(num):\n    \"\"\"Recursively calculate sum from 0 to the parameter\"\"\"\n    if num == 0:\n        return 0\n    else:\n        return num + recursive_sum(num - 1)\n        \nprint(recursive_sum(17))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Calculate sum"
     }
    ],
    "files": [
     "code/recursion/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a recursive function that find the sum for all numbers 0 to the original parameter"
  }
 },
 {
  "type": "test",
  "taskId": "test-552501310",
  "source": {
   "name": "recursion exercise 2 code test",
   "showName": false,
   "instructions": "Submit your code when you are ready",
   "command": "python3 .guides/secure/unit_tests/recursion/exercise2_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The recursive pattern is to take the first item from the list and add it to the `list_sum` of the original list from element 1 to the end of the list. The base case is when the list has just one element in it; return this last element. Here is a possible solution:\n\n```python\ndef list_sum(my_list):\n    \"\"\"Recursively calculate the sum of a list of numbers\"\"\"\n    if len(my_list) == 1:\n        return my_list[0]\n    else:\n        return my_list[0] + list_sum(my_list[1:])\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Lists"
     }
    ],
    "files": [
     "code/recursion/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a recursive function to calculate the sum of a list"
  }
 },
 {
  "type": "test",
  "taskId": "test-1580311453",
  "source": {
   "name": "recursion exercise 3 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/recursion/exercise3_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The problem is asking you to perform multiplication between 2 and the number of bunnies. The recursive pattern is adding 2 then calling `bunny_ears` with the number of bunnies minus 1. The base case is when the number of bunnies is 0. Here is a possible solution:\n\n```python\ndef bunny_ears(bunnies):\n    \"\"\"Recursively determine the number of bunny ears (2 per bunny)\"\"\"\n    if bunnies == 0:\n        return 0\n    else:\n        return 2 + bunny_ears(bunnies - 1)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Multiplication"
     }
    ],
    "files": [
     "code/recursion/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a recursive function that calculates the product of 2 and another number"
  }
 },
 {
  "type": "test",
  "taskId": "test-1726150510",
  "source": {
   "name": "recursion exercise 4 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/recursion/exercise4_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The recursive pattern is to take the last character from the string pass to the recursive function and concatenate it with the `reverse_string` using the string minus the last character. This is done with the slice operator (`[:-1]`). The base case is when the length of the string is 1, then you return the last character. Here is one possible solution:\n\n```python\ndef reverse_string(word):\n    if len(word) == 1:\n        return word[0]\n    else:\n        return word[-1] + reverse_string(word[:-1])\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Slice operator"
     }
    ],
    "files": [
     "code/recursion/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT recursively reverse a string"
  }
 },
 {
  "type": "test",
  "taskId": "test-178541446",
  "source": {
   "name": "recursion exercise 5 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/recursion/exercise5_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The recursive pattern is to select the largest value between the first number in the list and `get_max` which takes the rest of the list. The base case is when the list only has one number in it. In this case, return the number in the list. Here is one example of the solution:\n\n```python\ndef get_max(nums):\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums[0], get_max(nums[1:]))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Max function"
     }
    ],
    "files": [
     "code/recursion/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a recursive function to find the largest number in a list"
  }
 },
 {
  "type": "test",
  "taskId": "test-366499718",
  "source": {
   "name": "recursion lab challenge code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/recursion/lab_challenge_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The recursive pattern is to multiply the base by `recursive_power` with the exponent decreased by one. The base case is when the exponent is 0. In this case, return 1. Here is one possible solution:\n\n```python\ndef recursive_power(base, exp):\n    if exp == 0:\n        return 1\n    else:\n        return base * recursive_power(base, exp - 1)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Two parameters, exponents"
     }
    ],
    "files": [
     "code/recursion/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/lab_challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a recursive function to calculate a number raised to a power"
  }
 }
]